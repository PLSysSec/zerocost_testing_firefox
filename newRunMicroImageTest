#!/bin/bash

# set -o xtrace

source ./mozconfig_common
FFBuildDir=$BROWSER_BUILD_PATH
FFVersions=("zerocost" "fullsave" "regsave" "fullsavewindows" "lucet" "mpkfullsave32" "segmentsfizerocost" "naclfullsave32" "stockindirect32" "stock32")
# FFVersions=("naclfullsave32" "mpkfullsave32" "segmentsfizerocost" "stock32")

if [ -z "$1" ]; then
	echo "Expected argument $0 output_folder ['random']";
	exit 1;
fi

if [[ -f "$1" ]]; then
	echo "$1 already exists";
	exit 1;
fi

if [ -n "$2" ]; then
	if [[ "$2" != "random" ]]; then
		echo "Expected argument $0 output_folder ['random']";
		exit 1;
	fi
fi

OUTPUTPATH=$(cd "$(dirname "$1")"; pwd)/$(basename "$1")
mkdir -p ${OUTPUTPATH}
cd "$(dirname "$0")"

for (( i = 0; i < ${#FFVersions[@]}; i++ )); do
	if [[ ! -d "$FFBuildDir/firefox_latest_${FFVersions[$i]}_release" ]]; then
		echo "Not all firefox versions found: $FFBuildDir/firefox_latest_${FFVersions[$i]}_release";
		exit 1;
	fi
done

echo "Starting. Make sure to isolate cpus 1 then disable scaling with --- sudo cpufreq-set -c 1 --min 2200MHz --max 2200MHz"

# param: outputDir/prefix
# param: mozconfig
# param: random
function runTest(){
	FINISHED=0
	for (( l = 0; l < 3; l++ )); do
		pkill -f WebContent
		pkill -f firefox
		rm -f ./testing/mozharness/build/local.json

		echo "Start" | tee "$1_terminal_output.txt"

		if [[ "$3" == "random" ]]; then
			for (( k = 0; k < 5; k++ )); do
				MOZCONFIG=$2 taskset -c 1 ./mach talos-test --activeTests "jpeg_random_width_perf" 2>&1 | tee -a "$1_terminal_output.txt"
			done
		else
			for (( k = 0; k < 5; k++ )); do
				MOZCONFIG=$2 taskset -c 1 ./mach talos-test --activeTests "jpeg_width_perf" 2>&1 | tee -a "$1_terminal_output.txt"
			done
			for (( k = 0; k < 5; k++ )); do
				MOZCONFIG=$2 taskset -c 1 ./mach talos-test --activeTests "jpeg_black_width_perf" 2>&1 | tee -a "$1_terminal_output.txt"
			done
		fi
		retVal=${PIPESTATUS[0]}
		if [ $retVal -eq 0 ]; then
			FINISHED=1
			break;
		else
			echo "Failed to run test zerocost for $1. Retrying..." | tee -a "$1_terminal_output.txt"
			mv "$1_terminal_output.txt" "$1_terminal_output.run_$l.txt"
			sleep 30
		fi
	done
	if [ $FINISHED -eq 0 ]; then
		echo "Failed to run test zerocost for $1." | tee -a "$1_terminal_output.txt"
		exit 1
	fi
	sleep 10
	mv ./testing/mozharness/build/local.json "$1_rlbox_test_page_render.json"
}

SAVEDDIR=$PWD

for (( j = 0; j < ${#FFVersions[@]}; j++ )); do
    runTest "${OUTPUTPATH}/${FFVersions[$j]}" "mozconfig_${FFVersions[$j]}_release" "$2"
    cd $SAVEDDIR
done

for (( j = 0; j < ${#FFVersions[@]}; j++ )); do
	./newAnalyzePerf.py "${OUTPUTPATH}/${FFVersions[$j]}_terminal_output.txt" 2>&1 >> "${OUTPUTPATH}/${FFVersions[$j]}_terminal_analysis.json"
done

# ./newAnalyzeMicroImagesPart2.py "${OUTPUTPATH}/"
./newAnalyzeMicroImagesPart3.py "${OUTPUTPATH}/"
# ./newAnalyzeMicroImagesWasmMpk.py "${OUTPUTPATH}/"
